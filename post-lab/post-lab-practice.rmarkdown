---
title: "Post Lab 3 Practice"
subtitle: "Answer Key"
author: "Nathaniel Grimes"
format: 
  html:
    code-fold: true
    toc: true
    number-sections: true
    embed-resources: true
execute:
  echo: true
  message: false
  warning: false
---



## Attach Packages and Load Data



```{r}
library(tidyverse)
library(here)
library(broom)
library(patchwork)
# Spatial data packages
library(sf)
library(gstat)


#Load data
pop_den<-read_sf(here("data","pop_dens","sbc_pop_dens.shp")) %>% janitor::clean_names()

ca_counties_raw_sf <- read_sf(here("data", "ca_counties", "CA_Counties_TIGER2016.shp"))

# Clean the  SBcounty data here
sb_county_sf <- ca_counties_raw_sf %>% 
  janitor::clean_names() %>%
  filter(name=="Santa Barbara") %>% 
  select(county = name)
```



# Visualization and Cleaning:

Before we conduct spatial data analysis there are a few tasks we ought to complete. As always, visualize your data and examine its contents. Spatial data has the extra requirement that we need to make sure it contains the same cordinate reference systems (crs) between layers.

**1. Transform crs of the layers to match each other**
- set all to ESPG 3857


```{r}
ca_counties_raw_sf |> crs()
pop_den |> crs()
sb_county_sf |> crs()

pop_den <- pop_den |>
  st_transform(crs=3857)
```



**2. Plot the population densities in Santa Barbara county.**



```{r}
ggplot()+
  geom_sf(data=sb_county_sf, fill = "grey98") +
  geom_sf(data=pop_den, aes(color=popdens)) +
  scale_color_gradient(low = "plum1", high = "purple4") +
  theme_minimal()
  

```




  - What do you observe about the density? How to could we handle the sparsity of points in the Los Padres National Forest?
  
**3. Log Transform the population density data**



```{r}
pop_den <- pop_den |>
  mutate(popdens = log10(popdens))
```




**4. Build a variogram of population density**


```{r}
sb_popden_variogram <- gstat::variogram(popdens ~ 1, data = pop_den)

### Plot it
plot(sb_popden_variogram) 
```




**5. Plot the fitted variogram and identify the sill, range, and nugget**



```{r}
sb_popden_variogram_fit <- fit.variogram(sb_popden_variogram,
                         model = vgm(model = "Gau", 
                                     nugget = TRUE))

### Plot them together:
plot(sb_popden_variogram, sb_popden_variogram_fit) 
```




  - Optional: Compare the models with nugget = true and nugget =FALSE. Use the attr to get the sum of squared error to compare the fits
  
**6. Interpolate the density with the krige function**


```{r}
### Now create the variogram model, & see ?vgm for other model options: 
sb_popden_variogram_fit_nonug <- fit.variogram(sb_popden_variogram,
                         model = vgm(model = "Gau", 
                                     nugget = FALSE))

attr(sb_popden_variogram_fit_nonug,  'SSErr') 
attr(sb_popden_variogram_fit,  'SSErr') 

```




**7. Plot the interpolation as a ggplot suitable for publication**



```{r}

```

